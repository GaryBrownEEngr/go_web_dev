// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	models "github.com/GaryBrownEEngr/go_web_dev/backend/models"
	mock "github.com/stretchr/testify/mock"
)

// MathGameStore is an autogenerated mock type for the MathGameStore type
type MathGameStore struct {
	mock.Mock
}

// Read provides a mock function with given fields: username
func (_m *MathGameStore) Read(username string) (*models.MathGameData, error) {
	ret := _m.Called(username)

	var r0 *models.MathGameData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.MathGameData, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *models.MathGameData); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MathGameData)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Write provides a mock function with given fields: in
func (_m *MathGameStore) Write(in *models.MathGameData) error {
	ret := _m.Called(in)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.MathGameData) error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMathGameStore creates a new instance of MathGameStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMathGameStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MathGameStore {
	mock := &MathGameStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
